PYTHON : 

1.   COMMENTS : 

   -  '#' used for single line comments.
   -  ' """ ' used for multiple line comments.

2. VARIABLES : 

  - variable names can only contain alphabets (A - Z), (a - z), (1 - 9) and an underscore, and should not start with a number.
  - variable names are case sensitive.
  - CAMEL CASE : each word, except the first, starts with a capital letter. ex : helloWorld
  - PASCAL CASE : each word starts with a capital letter. ex : HelloWorld
  - SNAKE CASE : each word is separated by an underscore character. ex : hello_world

  - the variable do not need to declare with any particular data type.
  CASTING : to specify the data type of a variable . should use casting.
   For example : x = int(1)

 TO GET THE DATA TYPE : 
  - we can get the data type of a variable with the type() function.
   For example : 

         x = "john"
         print(type(x))

  - String variables can be declared either by using single or double quotes.


3. OUTPUT VARIABLES : 

   -  in the print(), the variables are seperated by a comma(,). or by using plus(+) operator.
    For example :

            x = "Hello"
            y = 'world'
            print(x, y) 
  
   - to add a number and a string we should separate the variables with comma(,).
      For example : 

          x = 1
          y = 'john'
          print(x, y)


4. GLOBAL VARIABLE : 


   - variable that are created outside of a function are known as global variables.
   - Global variables can be used by everyone, both inside and outside.
   - if a variable is used by multiple functions, we can declare it as global variable.
      For example : 

           x = "awesome"                      # this is a global variable

           def myfunc():
              x = "fantastic"                   # here this is a local variable 
              print("Python is " + x)

           myfunc()

          print("Python is " + x)



GLOBAL KEYWORD : 

   - when we use a variable inside a function, that variable will be local, and can only used inside that function only.
   - to create a global variable inside a function, we should use the global keyword.
      For example : 

          def myfunc():
           	 global x
 	 	 x = "fantastic"

	  myfunc()

	  print("Python is " + x)


   - also, we can use the global keyword if we want to change a global variable inside a function.

	For example : 
	def myfunc():
  		global x
  		x = "fantastic"

	myfunc()

	print("Python is " + x)




5.  DATA TYPES : 

	-Text type 		str
	-Numeric type	int,float,complex
	-Sequence type	list,tuple,range
	-Mapping type	dict
	-Set type			set,frozenset
	-Boolean type		bool
	-Binary type		bytes,bytearray,memoryview
	-None type		NoneType



	- By using type() function we can get the type of data that has given to the variables.
	For example : 

		x = 2
		print(type())

	x = "Hello World"										str

	x = 20												int
	
	x = 20.5												float
	
	x = 1j												complex
	
	x = ["apple", "banana", "cherry"]							list	

	x = ("apple", "banana", "cherry")							tuple
	
	x = range(6)											range
	
	x = {"name" : "John", "age" : 36}							dict	

	x = {"apple", "banana", "cherry"}							set	

	x = frozenset({"apple", "banana", "cherry"})					frozenset	

	x = True												bool	

	x = b"Hello"							 				bytes
	
	x = bytearray(5)										bytearray
	
	x = memoryview(bytes(5))								memoryview
		
	x = None												NoneType




6. NUMBERS : 


	 - Python does not have a random() function to make a random number, but Python has a built-in module called random that can be used to make random numbers.

	- Import the random module, and display a random number between 1 to 9:
	For example : 
		
		import random
		print(random.randrange(1,10))




7. STRINGS : 

	- to find the indexing numbers of the string 
          EX : 
		a = "Hello World"
		print(a[0])

	- to find length of a string
	EX :
		a = "Hello World"
		print(len(a))							# returns 11

	- to check the particular strings are present in a given string :
	EX : 
		a = "Hello world"
		print("World" in a)						# returns true



8. SLICING STRINGS :

		- it contains start,stop.
		- it is seperated by ' : ' colon.
		For example :
			b = "Hello, World!"
			print(b[0:5])							# returns  Hello

		- there is also negative indexing in the strings.



9. STRING MODIFY : 

		- we can change the strings from lower case to upper case or visa versa.
		For example :
			a = "Hello world"
			print(a.upper())						# returns HELLO WORLD


      STRING REPLACE : 
		
		- the replace() method replaces a string with another string.
		For example :
			a = "Hello world"
			print(a.replace("w" ; "W"))                              # returns  Hello World

	SPLIT STRING : 

		- The split() method splits the string into substrings if it finds instances of the separator:
		For example : 
			a = "hello, world"
			print(a.split(","))                                               # returns ['hello', 'world']


10. STRING FORMAT : 

		- in python it is not possible to directly combine string and a number.
		- we can combine string and a number by using f-strings or the format() method

	F - Strings : 
		- To specify a string as an f-string, simply put an f in front of the string literal, and add curly brackets {} as placeholders for variables and other operations.
		For example : 
			age = 36
			txt = f"My name is John, I am {age}"		# returns My name is John, I am 36
			print(txt)

		- A placeholder can contain variables, operations, functions, and modifiers to format the value.
		- A placeholder can include a modifier to format the value.
		- A modifier is included by adding a colon : followed by a legal formatting type, like .2f which means fixed point number with 2 decimals.
		For example : 
			price = 59
			txt = f"The price is {price:.2f} dollars"		#The price is 59.00 dollars
			print(txt)
		
		- place holders can also contains math operators.
		For example :
			txt = f"The price is {20 * 59} rupees"		#The price is 1180 rupees
			print(txt)

11. ESCAPE CHARACTER : 

		- backword slash is uesd in python as an escape character ("\").

			\'	Single Quote	
			\"	Double Quotes
			\\	Backslash	
			\n	New Line	
			\r	Carriage Return	
			\t	Tab	
			\b	Backspace	
			\f	Form Feed0	
			\ooo	Octal value	
			\xhh	Hex value	

12. STRING METHODS : 

		- All string methods return new values. They do not change the original string.


			Method			Description

		capitalize()			Converts the first character to upper case
		casefold()				Converts string into lower case
		center()				Returns a centered string
		count()				Returns the number of times a specified value occurs in a string
		encode()				Returns an encoded version of the string
		endswith()			Returns true if the string ends with the specified value
		expandtabs()			Sets the tab size of the string
		find()				Searches the string for a specified value and returns the position of where it was found
		format()				Formats specified values in a string
		format_map()			Formats specified values in a string
		index()				Searches the string for a specified value and returns the position of where it was found
		isalnum()				Returns True if all characters in the string are alphanumeric
		isalpha()				Returns True if all characters in the string are in the alphabet
		isascii()				Returns True if all characters in the string are ascii characters
		isdecimal()			Returns True if all characters in the string are decimals
		isdigit()				Returns True if all characters in the string are digits
		isidentifier()			Returns True if the string is an identifier
		islower()				Returns True if all characters in the string are lower case
		isnumeric()			Returns True if all characters in the string are numeric
		isprintable()			Returns True if all characters in the string are printable
		isspace()				Returns True if all characters in the string are whitespaces
		istitle()				Returns True if the string follows the rules of a title
		isupper()				Returns True if all characters in the string are upper case
		join()				Joins the elements of an iterable to the end of the string
		ljust()				Returns a left justified version of the string
		lower()				Converts a string into lower case
		lstrip()				Returns a left trim version of the string
		maketrans()			Returns a translation table to be used in translations
		partition()			Returns a tuple where the string is parted into three parts
		replace()				Returns a string where a specified value is replaced with a specified value
		rfind()				Searches the string for a specified value and returns the last position of where it was found
		rindex()				Searches the string for a specified value and returns the last position of where it was found
		rjust()				Returns a right justified version of the string
		rpartition()			Returns a tuple where the string is parted into three parts
		rsplit()				Splits the string at the specified separator, and returns a list
		rstrip()				Returns a right trim version of the string
		split()				Splits the string at the specified separator, and returns a list
		splitlines()			Splits the string at line breaks and returns a list
		startswith()			Returns true if the string starts with the specified value
		strip()				Returns a trimmed version of the string
		swapcase()			Swaps cases, lower case becomes upper case and vice versa
		title()				Converts the first character of each word to upper case
		translate()			Returns a translated string
		upper()				Converts a string into upper case
		zfill()				Fills the string with a specified number of 0 values at the beginning


13. BOOLEAN : 
		
	MOST OF THE VALUES ARE TRUE:
		- Almost any value is evaluated to True if it has some sort of content.
		- Any string is True, except empty strings.
		- Any number is True, except 0.
		- Any list, tuple, set, and dictionary are True, except empty ones.
			For example : 
				bool("abc")
				bool(123)
				bool(["one" , "two", "three"])

	SOME VALUES ARE FALSE : 
		- In fact, there are not many values that evaluate to False, except empty values, such as (), [], {}, "", the number 0, and the value None. And of course the value False evaluates to False.

			For example : 
				bool(False)
				bool(None)
				bool(0)
				bool("")             
				bool(())
				bool([])
				bool({})


14. OPERATORS : 

		- Operators are used to perform operations on variables and values.

		- Python divides the operators in the following groups:

				- Arithmetic operators
				- Assignment operators
				- Comparison operators
				- Logical operators
				- Identity operators
				- Membership operators
				- Bitwise operators





		- ARITHMETIC OPERATORS : 

					- Arithmetic operators are used with numeric values to perform common mathematical operations :

						Operator				Name						Example	
					
							+			     Addition						  x + y	
							-			   Subtraction					       	  x - y	
							*			Multiplication					  x * y	
							/			     Division						  x / y	
							%			     Modulus						  x % y	
							**			Exponentiation					  x ** y	
							//			Floor division						  x // y





		- ASSIGNMENT OPERATORS : 

					- Assignment operators are used to assign values to variables : 

						Operator					Example							Same As
					
							=					x = 5								x = 5	
							+=					x += 3							x = x + 3	
							-=					x -= 3							x = x - 3	
							*=					x *= 3							x = x * 3	
							/=					x /= 3							x = x / 3	
							%=					x %= 3							x = x % 3	
							//=					x //= 3							x = x // 3	
							**=					x **= 3							x = x ** 3	
							&=					x &= 3							x = x & 3	
							|=					x |= 3							x = x | 3	
							^=					x ^= 3							x = x ^ 3	
							>>=					x >>= 3							x = x >> 3	
							<<=					x <<= 3							x = x << 3	
							:=					print(x := 3)						x = 3
																				print(x)





		- COMPARISON OPERATOR : 

					
					- Comparison operators are used to compare two values.

						Operator					Name						Example	
						
							==					Equal						x == y	
							!=				    Not equal						x != y	
							>				 Greater than						x > y	
							<				    Less than						x < y	
							>=			   Greater than or equal to				x >= y	
							<=			      Less than or equal to				x <= y





		- LOGICAL OPERATORS : 

					- Logical operators are used to combine conditional statements.

		Operator								Description									Example	
		
		and 						Returns True if both statements are true					x < 5 and  x < 10	
		or					      Returns True if one of the statements is true					x < 5 or x < 4	
		not					  Reverse the result, returns False if the result is true			not(x < 5 and x < 10)






		- IDENTITY OPERATORS : 

					- Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location.

		Operator								Description									Example	
			
			is 			Returns True if both variables are the same object						x is y	
			is not		Returns True if both variables are not the same object					x is not y






		- MEMBERSHIP OPERATORS : 

					- Membership operators are used to test if a sequence is presented in an object.

		Operator								Description									Example	
			
			in 		Returns True if a sequence with the specified value is present in the object		x in y	
			not in	Returns True if a sequence with the specified value is not present in the object	x not in y






		- BITWISE OPERATORS : 

					- Bitwise operators are used to compare (binary) numbers.

	Operator			Name					Description																	Example	

	& 				AND		Sets each bit to 1 if both bits are 1																x & y	
	|				OR			Sets each bit to 1 if one of two bits is 1															x | y	
	^				XOR			Sets each bit to 1 if only one of two bits is 1														x ^ y	
	~				NOT			Inverts all the bits																		~x	
	<<			Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off							x << 2	
	>>			Signed right shift	Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off			x >> 2





		- OPERATOR PRECEDENCE : 

					- Operator precedence describes the order in which operations are performed.

		Operator							Description	
			
			()							Parentheses	
			**							Exponentiation	
			+x  -x  ~x						Unary plus, unary minus, and bitwise NOT	
			*  /  //  %						Multiplication, division, floor division, and modulus	
			+  -							Addition and subtraction	
			<<  >>						Bitwise left and right shifts	
			&							Bitwise AND	
			^							Bitwise XOR	
			|							Bitwise OR	
			==  !=  >  >=  <  <=  				is  is not  in  not in 	Comparisons, identity, and membership operators	
			not							Logical NOT	
			and							AND	
			or							OR	

			- If two operators have the same precedence, the expression is evaluated from left to right.









15. LISTS : 

			- lists are used to store multiple items in a single variable.
			- Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.
			- Lists are created using square brackets.

				For example : 	
						fruits = 	["apple" , "banana" , "grapes"]
						print(fruits)



	-LIST ITEMS : 
           
			- List items are ordered, changeable, and allow duplicate values.
			- List items are indexed, the first item has index [0], the second item has index [1] and so on.........

	- ORDERED:

			- When we say that lists are ordered, it means that the items have a defined order, and that order will not change.
			- If you add new items to a list, the new items will be placed at the end of the list.
			- There are some list methods that will change the order, but in general: the order of the items will not change.

	- CHANGEABLE : 
			- The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.


	- COLLECTIONS(Arrays)

			- There are four collection data types in the Python programming language:
			- List is a collection which is ordered and changeable. Allows duplicate members.
			- Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
			- Set is a collection which is unordered, unchangeable*, and unindexed. No duplicate members.
			- Dictionary is a collection which is ordered** and changeable. No duplicate members.

	- INSERT ITEMS : 
 
			- To insert a new list item, without replacing any of the existing values, we can use the insert() method.
			- The insert() method inserts an item at the specified index.

				For example : 

					fruits= ["apple", "banana", "cherry"]
					fruits.insert(2, "watermelon")
					print(fruits)

	- APPEND ITEMS : 
			
			- To add an item to the end of the list, use the append() method:
			- ExampleGet your own Python Server
			- Using the append() method to append an item:
			
				For example : 

					fruits = ["apple", "banana", "cherry"]
					fruits.append("orange")
					print(fruits)


































































































































































































































































